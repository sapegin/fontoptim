'use strict';

fs = require 'fs'
path = require 'path'
glob = require 'glob'
expect = (require 'chai').expect
FontOptim = require '../lib/fontoptim'
fontoptim = require '../index'

# Read fonts
fonts = {}
glob.sync('test/fonts/*.{woff,woff2}').forEach((name) ->
	fonts[path.basename(name)] = fs.readFileSync(name)
)

# Read result CSS
expected = {}
glob.sync('test/expected/*').forEach((name) ->
	expected[path.basename(name)] = fs.readFileSync(name, {encoding: 'utf-8'})
)

# Common options
options = {fontFamily: 'PT Serif'}

describe 'FontOptim class', ->

	it 'exists', (done) ->
		expect(FontOptim).to.exists
		done()

	it 'options', (done) ->
		fo = new FontOptim({}, options)
		expect(fo.fontFamily).to.equals('PT Serif')
		expect(fo.banner).to.equals('/* Generated by github.com/sapegin/fontoptim */\n')
		done()

	it 'getFontFormat', (done) ->
		fo = new FontOptim({}, options)
		format = fo.getFontFormat('PTSerif-Regular.woff')
		expect(format).to.equals('woff')
		format = fo.getFontFormat('PTSerif-Bold.woff2')
		expect(format).to.equals('woff2')
		done()

	it 'getFontWeight', (done) ->
		fo = new FontOptim({}, options)
		weight = fo.getFontWeight('PTSerif-Regular.woff')
		expect(weight).to.equals(400)
		weight = fo.getFontWeight('PTSerif-Bold.woff2')
		expect(weight).to.equals(600)
		done()

	it 'getFontStyle', (done) ->
		fo = new FontOptim({}, options)
		style = fo.getFontStyle('PTSerif-Bold.woff2')
		expect(style).to.equals('normal')
		style = fo.getFontStyle('PTSerif-Italic.woff2')
		expect(style).to.equals('italic')
		done()

	it 'stringToBase64', (done) ->
		fo = new FontOptim({}, options)
		base64 = fo.stringToBase64('Hello world')
		expect(base64).to.equals('SGVsbG8gd29ybGQ=')
		done()

	it 'getMimeType', (done) ->
		fo = new FontOptim({}, options)
		woffMime = fo.getMimeType('woff')
		woff2Mime = fo.getMimeType('woff2')
		expect(woffMime).to.equals('application/font-woff')
		expect(woff2Mime).to.equals('font/woff2')
		done()

	it 'getFontUri', (done) ->
		fo = new FontOptim({}, options)
		woffUri = fo.getFontUri('woff', 'Hello world')
		woff2Uri = fo.getFontUri('woff2', 'Hello world')
		expect(woffUri).to.equals('data:application/font-woff;charset=utf-8;base64,SGVsbG8gd29ybGQ=')
		expect(woff2Uri).to.equals('data:font/woff2;charset=utf-8;base64,SGVsbG8gd29ybGQ=')
		done()

	it 'getFontFace', (done) ->
		fo = new FontOptim({}, options)
		woffFontFace = fo.getFontFace('PTSerif-Bold.woff', 'woff', 'Hello world')
		woff2FontFace = fo.getFontFace('PTSerif-Bold.woff2', 'woff2', 'Hello world')
		expect(woffFontFace).to.equals([
			'@font-face{'
				'font-family:"PT Serif";'
				'src:url(data:application/font-woff;charset=utf-8;base64,SGVsbG8gd29ybGQ=) format("woff");'
				'font-weight:600;'
				'font-style:normal'
			'}'
		].join(''))
		expect(woff2FontFace).to.equals([
			'@font-face{'
				'font-family:"PT Serif";'
				'src:url(data:font/woff2;charset=utf-8;base64,SGVsbG8gd29ybGQ=) format("woff2");'
				'font-weight:600;'
				'font-style:normal'
			'}'
		].join(''))
		done()

	it 'generate: empty font list', (done) ->
		fo = new FontOptim({}, options)
		result = fo.generate()
		expect(result).to.be.an('object')
		expect(result).to.be.empty
		done()

	it 'generate', (done) ->
		fo = new FontOptim(fonts, options)
		result = fo.generate()
		expect(result.woff).not.to.be.empty
		expect(result.woff).to.equals(expected['woff.css'])
		expect(result.woff2).not.to.be.empty
		expect(result.woff2).to.equals(expected['woff2.css'])
		done()

describe 'fontoptim wrapper', ->

	it 'exists', (done) ->
		expect(fontoptim).to.exists
		done()

	it 'generate', (done) ->
		result = fontoptim(fonts, options)
		expect(result.woff).not.to.be.empty
		expect(result.woff).to.equals(expected['woff.css'])
		expect(result.woff2).not.to.be.empty
		expect(result.woff2).to.equals(expected['woff2.css'])
		done()

describe 'readme example', ->

	it 'generate', (done) ->
		example = require('./example')
		fs.mkdirSync('test/tmp')  unless fs.existsSync('test/tmp')
		example()
		woff = fs.readFileSync('test/tmp/ptserif.woff.css', {encoding: 'utf-8'})
		expect(woff).not.to.be.empty
		expect(woff).to.equals(expected['woff.css'])
		woff2 = fs.readFileSync('test/tmp/ptserif.woff2.css', {encoding: 'utf-8'})
		expect(woff2).not.to.be.empty
		expect(woff2).to.equals(expected['woff2.css'])
		fs.unlinkSync('test/tmp/ptserif.woff.css')
		fs.unlinkSync('test/tmp/ptserif.woff2.css')
		fs.rmdirSync('test/tmp')
		done()
